// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetRuntimeLogsRequest struct {
	ProjectID    string `pathParam:"style=simple,explode=false,name=projectId"`
	DeploymentID string `pathParam:"style=simple,explode=false,name=deploymentId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetRuntimeLogsRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetRuntimeLogsRequest) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *GetRuntimeLogsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetRuntimeLogsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetRuntimeLogsLevel string

const (
	GetRuntimeLogsLevelError   GetRuntimeLogsLevel = "error"
	GetRuntimeLogsLevelWarning GetRuntimeLogsLevel = "warning"
	GetRuntimeLogsLevelInfo    GetRuntimeLogsLevel = "info"
)

func (e GetRuntimeLogsLevel) ToPointer() *GetRuntimeLogsLevel {
	return &e
}
func (e *GetRuntimeLogsLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warning":
		fallthrough
	case "info":
		*e = GetRuntimeLogsLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRuntimeLogsLevel: %v", v)
	}
}

type GetRuntimeLogsSource string

const (
	GetRuntimeLogsSourceDelimiter      GetRuntimeLogsSource = "delimiter"
	GetRuntimeLogsSourceEdgeFunction   GetRuntimeLogsSource = "edge-function"
	GetRuntimeLogsSourceEdgeMiddleware GetRuntimeLogsSource = "edge-middleware"
	GetRuntimeLogsSourceServerless     GetRuntimeLogsSource = "serverless"
	GetRuntimeLogsSourceRequest        GetRuntimeLogsSource = "request"
)

func (e GetRuntimeLogsSource) ToPointer() *GetRuntimeLogsSource {
	return &e
}
func (e *GetRuntimeLogsSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delimiter":
		fallthrough
	case "edge-function":
		fallthrough
	case "edge-middleware":
		fallthrough
	case "serverless":
		fallthrough
	case "request":
		*e = GetRuntimeLogsSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRuntimeLogsSource: %v", v)
	}
}

type GetRuntimeLogsResponseBody struct {
	Level              GetRuntimeLogsLevel  `json:"level"`
	Message            string               `json:"message"`
	RowID              string               `json:"rowId"`
	Source             GetRuntimeLogsSource `json:"source"`
	TimestampInMs      float64              `json:"timestampInMs"`
	Domain             string               `json:"domain"`
	MessageTruncated   bool                 `json:"messageTruncated"`
	RequestMethod      string               `json:"requestMethod"`
	RequestPath        string               `json:"requestPath"`
	ResponseStatusCode float64              `json:"responseStatusCode"`
}

func (o *GetRuntimeLogsResponseBody) GetLevel() GetRuntimeLogsLevel {
	if o == nil {
		return GetRuntimeLogsLevel("")
	}
	return o.Level
}

func (o *GetRuntimeLogsResponseBody) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *GetRuntimeLogsResponseBody) GetRowID() string {
	if o == nil {
		return ""
	}
	return o.RowID
}

func (o *GetRuntimeLogsResponseBody) GetSource() GetRuntimeLogsSource {
	if o == nil {
		return GetRuntimeLogsSource("")
	}
	return o.Source
}

func (o *GetRuntimeLogsResponseBody) GetTimestampInMs() float64 {
	if o == nil {
		return 0.0
	}
	return o.TimestampInMs
}

func (o *GetRuntimeLogsResponseBody) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetRuntimeLogsResponseBody) GetMessageTruncated() bool {
	if o == nil {
		return false
	}
	return o.MessageTruncated
}

func (o *GetRuntimeLogsResponseBody) GetRequestMethod() string {
	if o == nil {
		return ""
	}
	return o.RequestMethod
}

func (o *GetRuntimeLogsResponseBody) GetRequestPath() string {
	if o == nil {
		return ""
	}
	return o.RequestPath
}

func (o *GetRuntimeLogsResponseBody) GetResponseStatusCode() float64 {
	if o == nil {
		return 0.0
	}
	return o.ResponseStatusCode
}

type GetRuntimeLogsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetRuntimeLogsResponseBody
}

func (o *GetRuntimeLogsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetRuntimeLogsResponse) GetObject() *GetRuntimeLogsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
