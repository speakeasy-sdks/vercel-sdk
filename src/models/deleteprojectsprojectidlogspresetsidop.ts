/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DeleteProjectsProjectIdLogsPresetsIdRequest = {
  /**
   * projectId of the preset
   */
  projectId: string;
  /**
   * id of the preset
   */
  id: string;
};

/** @internal */
export const DeleteProjectsProjectIdLogsPresetsIdRequest$inboundSchema:
  z.ZodType<
    DeleteProjectsProjectIdLogsPresetsIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    projectId: z.string(),
    id: z.string(),
  });

/** @internal */
export type DeleteProjectsProjectIdLogsPresetsIdRequest$Outbound = {
  projectId: string;
  id: string;
};

/** @internal */
export const DeleteProjectsProjectIdLogsPresetsIdRequest$outboundSchema:
  z.ZodType<
    DeleteProjectsProjectIdLogsPresetsIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteProjectsProjectIdLogsPresetsIdRequest
  > = z.object({
    projectId: z.string(),
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteProjectsProjectIdLogsPresetsIdRequest$ {
  /** @deprecated use `DeleteProjectsProjectIdLogsPresetsIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteProjectsProjectIdLogsPresetsIdRequest$inboundSchema;
  /** @deprecated use `DeleteProjectsProjectIdLogsPresetsIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteProjectsProjectIdLogsPresetsIdRequest$outboundSchema;
  /** @deprecated use `DeleteProjectsProjectIdLogsPresetsIdRequest$Outbound` instead. */
  export type Outbound = DeleteProjectsProjectIdLogsPresetsIdRequest$Outbound;
}

export function deleteProjectsProjectIdLogsPresetsIdRequestToJSON(
  deleteProjectsProjectIdLogsPresetsIdRequest:
    DeleteProjectsProjectIdLogsPresetsIdRequest,
): string {
  return JSON.stringify(
    DeleteProjectsProjectIdLogsPresetsIdRequest$outboundSchema.parse(
      deleteProjectsProjectIdLogsPresetsIdRequest,
    ),
  );
}

export function deleteProjectsProjectIdLogsPresetsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteProjectsProjectIdLogsPresetsIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteProjectsProjectIdLogsPresetsIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteProjectsProjectIdLogsPresetsIdRequest' from JSON`,
  );
}
