/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PatchProjectsProjectIdLogsPresetsIdRequestBody = {
  /**
   * The title of the preset
   */
  title: string;
};

export type PatchProjectsProjectIdLogsPresetsIdRequest = {
  /**
   * projectId of the preset
   */
  projectId: string;
  /**
   * Id of the preset
   */
  id: string;
  requestBody?: PatchProjectsProjectIdLogsPresetsIdRequestBody | undefined;
};

/** @internal */
export const PatchProjectsProjectIdLogsPresetsIdRequestBody$inboundSchema:
  z.ZodType<
    PatchProjectsProjectIdLogsPresetsIdRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    title: z.string(),
  });

/** @internal */
export type PatchProjectsProjectIdLogsPresetsIdRequestBody$Outbound = {
  title: string;
};

/** @internal */
export const PatchProjectsProjectIdLogsPresetsIdRequestBody$outboundSchema:
  z.ZodType<
    PatchProjectsProjectIdLogsPresetsIdRequestBody$Outbound,
    z.ZodTypeDef,
    PatchProjectsProjectIdLogsPresetsIdRequestBody
  > = z.object({
    title: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProjectsProjectIdLogsPresetsIdRequestBody$ {
  /** @deprecated use `PatchProjectsProjectIdLogsPresetsIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchProjectsProjectIdLogsPresetsIdRequestBody$inboundSchema;
  /** @deprecated use `PatchProjectsProjectIdLogsPresetsIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchProjectsProjectIdLogsPresetsIdRequestBody$outboundSchema;
  /** @deprecated use `PatchProjectsProjectIdLogsPresetsIdRequestBody$Outbound` instead. */
  export type Outbound =
    PatchProjectsProjectIdLogsPresetsIdRequestBody$Outbound;
}

export function patchProjectsProjectIdLogsPresetsIdRequestBodyToJSON(
  patchProjectsProjectIdLogsPresetsIdRequestBody:
    PatchProjectsProjectIdLogsPresetsIdRequestBody,
): string {
  return JSON.stringify(
    PatchProjectsProjectIdLogsPresetsIdRequestBody$outboundSchema.parse(
      patchProjectsProjectIdLogsPresetsIdRequestBody,
    ),
  );
}

export function patchProjectsProjectIdLogsPresetsIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchProjectsProjectIdLogsPresetsIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchProjectsProjectIdLogsPresetsIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchProjectsProjectIdLogsPresetsIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchProjectsProjectIdLogsPresetsIdRequest$inboundSchema:
  z.ZodType<PatchProjectsProjectIdLogsPresetsIdRequest, z.ZodTypeDef, unknown> =
    z.object({
      projectId: z.string(),
      id: z.string(),
      RequestBody: z.lazy(() =>
        PatchProjectsProjectIdLogsPresetsIdRequestBody$inboundSchema
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "RequestBody": "requestBody",
      });
    });

/** @internal */
export type PatchProjectsProjectIdLogsPresetsIdRequest$Outbound = {
  projectId: string;
  id: string;
  RequestBody?:
    | PatchProjectsProjectIdLogsPresetsIdRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PatchProjectsProjectIdLogsPresetsIdRequest$outboundSchema:
  z.ZodType<
    PatchProjectsProjectIdLogsPresetsIdRequest$Outbound,
    z.ZodTypeDef,
    PatchProjectsProjectIdLogsPresetsIdRequest
  > = z.object({
    projectId: z.string(),
    id: z.string(),
    requestBody: z.lazy(() =>
      PatchProjectsProjectIdLogsPresetsIdRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProjectsProjectIdLogsPresetsIdRequest$ {
  /** @deprecated use `PatchProjectsProjectIdLogsPresetsIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PatchProjectsProjectIdLogsPresetsIdRequest$inboundSchema;
  /** @deprecated use `PatchProjectsProjectIdLogsPresetsIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PatchProjectsProjectIdLogsPresetsIdRequest$outboundSchema;
  /** @deprecated use `PatchProjectsProjectIdLogsPresetsIdRequest$Outbound` instead. */
  export type Outbound = PatchProjectsProjectIdLogsPresetsIdRequest$Outbound;
}

export function patchProjectsProjectIdLogsPresetsIdRequestToJSON(
  patchProjectsProjectIdLogsPresetsIdRequest:
    PatchProjectsProjectIdLogsPresetsIdRequest,
): string {
  return JSON.stringify(
    PatchProjectsProjectIdLogsPresetsIdRequest$outboundSchema.parse(
      patchProjectsProjectIdLogsPresetsIdRequest,
    ),
  );
}

export function patchProjectsProjectIdLogsPresetsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchProjectsProjectIdLogsPresetsIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchProjectsProjectIdLogsPresetsIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchProjectsProjectIdLogsPresetsIdRequest' from JSON`,
  );
}
