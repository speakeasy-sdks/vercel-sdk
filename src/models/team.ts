/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type Data = {
  query: string;
  creatorId: string;
  title: string;
  groupId: string;
  ownerId: string;
  projectId: string;
  createdAt: number;
};

/**
 * Data representing a Team.
 */
export type Team = {
  /**
   * The Preset's unique identifier.
   */
  id: string;
  data: Data;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    query: z.string(),
    creatorId: z.string(),
    title: z.string(),
    groupId: z.string(),
    ownerId: z.string(),
    projectId: z.string(),
    createdAt: z.number(),
  });

/** @internal */
export type Data$Outbound = {
  query: string;
  creatorId: string;
  title: string;
  groupId: string;
  ownerId: string;
  projectId: string;
  createdAt: number;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    query: z.string(),
    creatorId: z.string(),
    title: z.string(),
    groupId: z.string(),
    ownerId: z.string(),
    projectId: z.string(),
    createdAt: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const Team$inboundSchema: z.ZodType<Team, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      id: z.string(),
      data: z.lazy(() => Data$inboundSchema),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  );

/** @internal */
export type Team$Outbound = {
  id: string;
  data: Data$Outbound;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Team$outboundSchema: z.ZodType<Team$Outbound, z.ZodTypeDef, Team> =
  z.object({
    id: z.string(),
    data: z.lazy(() => Data$outboundSchema),
    additionalProperties: z.record(z.any()),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Team$ {
  /** @deprecated use `Team$inboundSchema` instead. */
  export const inboundSchema = Team$inboundSchema;
  /** @deprecated use `Team$outboundSchema` instead. */
  export const outboundSchema = Team$outboundSchema;
  /** @deprecated use `Team$Outbound` instead. */
  export type Outbound = Team$Outbound;
}

export function teamToJSON(team: Team): string {
  return JSON.stringify(Team$outboundSchema.parse(team));
}

export function teamFromJSON(
  jsonString: string,
): SafeParseResult<Team, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Team$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Team' from JSON`,
  );
}
